version: '3.8'

services:
  # Kong Database (PostgreSQL)
  kong-db:
    image: postgres:13
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong123}
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kong-network
    restart: unless-stopped

  # Kong API Gateway
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong123}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    ports:
      - "8000:8000"  # Kong Proxy
      - "8001:8001"  # Kong Admin API
      - "8002:8002"  # Kong Manager
    depends_on:
      kong-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kong-network
    restart: unless-stopped

  # Kong Database Migration
  kong-migration:
    image: kong:3.4
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong123}
    command: kong migrations bootstrap
    depends_on:
      kong-db:
        condition: service_healthy
    restart: "no"
    networks:
      - kong-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: authdb
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-proot"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - kong-network
    restart: unless-stopped

  # Auth Backend Service
  auth-backend:
    build: ./AuthService/backend
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=authdb
      - DB_USER=root
      - DB_PASSWORD=${MYSQL_ROOT_PASSWORD:-root}
      - JWT_SECRET=${JWT_SECRET:-your_production_jwt_secret}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000,http://localhost:5173}
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8003:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kong-network
    restart: unless-stopped

  # Frontend Build
  frontend-build:
    build:
      context: ./AuthService/frontend/auth-ui
      dockerfile: Dockerfile
    volumes:
      - frontend_dist:/app/dist
    networks:
      - kong-network

  # Nginx for Frontend with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_dist:/usr/share/nginx/html:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend-build
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kong-network
    restart: unless-stopped

volumes:
  kong_data:
  mysql_data:
  frontend_dist:

networks:
  kong-network:
    driver: bridge