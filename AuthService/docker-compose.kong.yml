version: "3.9"

services:
  auth-db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-xdhdt}
      MYSQL_USER: ${MYSQL_USER:-authsvc}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-123456}
    ports:
      - "3306:3306"
    volumes:
      - auth_db_data:/var/lib/mysql
      # - ./mysql-init:/docker-entrypoint-initdb.d
    networks:
      - gateway-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-backend:
    build:
      context: ./backend
    env_file:
      - ./backend/.env.docker
    depends_on:
      auth-db:
        condition: service_healthy
    ports:
      - "8080:8000"
    networks:
      - gateway-net

  kong-database:
    image: postgres:15
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kongpass}
    ports:
      - "5432:5432"
    volumes:
      - kong_db_data:/var/lib/postgresql/data
    networks:
      - gateway-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migrations:
    image: kong:3.6
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kongpass}
      KONG_PASSWORD: ${KONG_ADMIN_PASSWORD:-kong}
    networks:
      - gateway-net
    restart: "no"

  kong:
    image: kong:3.6
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kongpass}
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_LOG_LEVEL: ${KONG_LOG_LEVEL:-info}
      KONG_JWT_SECRET: ${KONG_JWT_SECRET:-changeme}
      KONG_RATE_LIMIT_MINUTE: ${KONG_RATE_LIMIT_MINUTE:-1000}
      KONG_RATE_LIMIT_HOUR: ${KONG_RATE_LIMIT_HOUR:-10000}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_NGINX_WORKER_PROCESSES: "2"
      KONG_NGINX_HTTP_CLIENT_BODY_BUFFER_SIZE: "128k"
      KONG_NGINX_HTTP_CLIENT_MAX_BODY_SIZE: "10m"
      KONG_NGINX_HTTP_CLIENT_BODY_TIMEOUT: "60s"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./kong/kong.yml:/home/kong/kong.yml:ro
    networks:
      - gateway-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 10

  kong-config:
    image: curlimages/curl:8.11.1
    depends_on:
      kong:
        condition: service_healthy
    environment:
      KONG_ADMIN_URL: http://kong:8001
    entrypoint: >
      sh -c "until curl -sSf http://kong:8001/status >/dev/null; do sleep 2; done;
             echo 'Kong is ready, skipping config upload for now'"
    volumes:
      - ./kong/kong.yml:/config/kong.yml:ro
    networks:
      - gateway-net
    restart: "no"

  rental-svc:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./stubs/mock-service:/app:ro
    environment:
      PORT: 3002
      SERVICE_KIND: rental
    command: ["node", "server.js"]
    networks:
      - gateway-net
    expose:
      - "3002"

  fleet-svc:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./stubs/mock-service:/app:ro
    environment:
      PORT: 3003
      SERVICE_KIND: fleet
    command: ["node", "server.js"]
    networks:
      - gateway-net
    expose:
      - "3003"

  admin-svc:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./stubs/mock-service:/app:ro
    environment:
      PORT: 3001
      SERVICE_KIND: admin
    command: ["node", "server.js"]
    networks:
      - gateway-net
    expose:
      - "3001"

  frontend:
    build:
      context: ./frontend/auth-ui
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://kong:8000}
    depends_on:
      kong:
        condition: service_healthy
    ports:
      - "5173:80"
    networks:
      - gateway-net

  konga:
    image: pantsel/konga:latest
    environment:
      - NODE_ENV=production
    ports:
      - "1337:1337"
    networks:
      - gateway-net
    depends_on:
      kong:
        condition: service_healthy
    restart: unless-stopped

networks:
  gateway-net:
    driver: bridge

volumes:
  auth_db_data: {}
  kong_db_data: {}
